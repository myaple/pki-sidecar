events {
    worker_connections 1024;
}

http {
    # Use Docker's internal DNS resolver
    resolver 127.0.0.11 valid=30s;

    server {
        listen 80;
        server_name localhost;

        # Client certificate configuration
        ssl_client_certificate /etc/nginx/certs/client.crt;
        ssl_verify_client optional;

        location /v1 {
            # Set variable to enable runtime DNS resolution
            set $upstream_example example.com;
            
            # Proxy to HTTPS backend
            proxy_pass https://$upstream_example/API/v1;
            proxy_ssl_certificate /etc/nginx/certs/client.crt;
            proxy_ssl_certificate_key /etc/nginx/certs/client.key;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Standard proxy headers
            proxy_set_header Host example.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle redirects
            proxy_redirect off;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}